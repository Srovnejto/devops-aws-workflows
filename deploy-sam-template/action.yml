name: "Deploy SAM template"
description: "Deploy SAM template"
inputs:
  STACK_NAME:
    description: "CloudFormation stack name"
    required: true
  AWS_ENVIRONMENT:
    description: "CloudFormation stack name"
    required: true
  TEMPLATE_FILE:
    description: "Value of --template-file parametere of sam build command"
    required: false 
    default: "aws-deploy/template.yml"
  BASE_DIR:
    description: "Value of --base-dir parametere of sam build command"
    required: false 
    default: "./src"
  BENDER_TOKEN:
    description: "Token used to add Nuget repository source"
    required: true 
  PARAMETER_OVERRIDES_DEV:
    description: "Parameters override for DEV environment"
    required: false
    default: ""
  PARAMETER_OVERRIDES_UAT:
    description: "Parameters override for UAT environment"
    required: false
    default: ""
  PARAMETER_OVERRIDES_PROD:
    description: "Parameters override for PROD environment"
    required: false
    default: ""
  PARAMETER_OVERRIDES_ROOT:
    description: "Parameters override for ROOT environment"
    required: false
    default: ""
  TAGS_DEV:
    description: "CloudFormation tags for DEV environment"
    required: false
    default: ""
  TAGS_UAT:
    description: "CloudFormation tags for UAT environment"
    required: false
    default: ""
  TAGS_PROD:
    description: "CloudFormation tags for PROD environment"
    required: false
    default: ""
  TAGS_ROOT:
    description: "CloudFormation tags for ROOT environment"
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: Add Srovnejto NuGet source
      shell: bash
      run: |
        dotnet nuget add source -u "srt-bender" -p "${{ inputs.BENDER_TOKEN }}" -n "Srovnejto-GitHub" "https://nuget.pkg.github.com/Srovnejto/index.json" --store-password-in-clear-text
        echo "Nuget package store added successfully."

    - name: Build SAM template
      shell: bash
      run: |
        sam build --template-file ${{ inputs.TEMPLATE_FILE }} --base-dir ${{ inputs.BASE_DIR }}
        echo "SAM template built successfully."


    - shell: bash
      run: |
        echo AWS_ENVIRONMENT=${{ env.AWS_ENVIRONMENT }}

        if [ "${{ inputs.AWS_ENVIRONMENT }}" = "DEV" ] ; then
          PARAMETER_OVERRIDES="env=dev ${{ inputs.PARAMETER_OVERRIDES_DEV }}"
          TAGS="env=dev ${{ inputs.TAGS_DEV }}"
          S3_BUCKET=lambda-source-codes-ahcnywhidys
          echo Using DEV parameters.
        fi

        if [ "${{ inputs.AWS_ENVIRONMENT }}" = "UAT" ] ; then
          PARAMETER_OVERRIDES="env=uat ${{ inputs.PARAMETER_OVERRIDES_UAT }}"
          TAGS="env=uat ${{ inputs.TAGS_UAT }}"
          S3_BUCKET=lambda-source-codes-uatxxdflkad
          echo Using UAT parameters.
        fi

        if [ "${{ inputs.AWS_ENVIRONMENT }}" = "PROD" ] ; then
          PARAMETER_OVERRIDES="env=prod ${{ inputs.PARAMETER_OVERRIDES_PROD }}"
          TAGS="env=prod ${{ inputs.TAGS_PROD }}"
          S3_BUCKET=lambda-source-codes-jlkasdflkad
          echo Using PROD parameters.
        fi

        if [ "${{ inputs.AWS_ENVIRONMENT }}" = "ROOT" ] ; then
          PARAMETER_OVERRIDES="env=root ${{ inputs.PARAMETER_OVERRIDES_ROOT }}"
          TAGS="env=root ${{ inputs.TAGS_ROOT }}"
          S3_BUCKET=lambda-source-codes-sdfscxvdf
          echo Using ROOT parameters.
        fi

        if [ ! -s aws-deploy/samconfig.toml ]; then
          mkdir aws-deploy 2>/dev/null || true
          echo "version = 0.1" > aws-deploy/samconfig.toml
        fi

        echo "Deploy parameters: --stack-name ${{ inputs.STACK_NAME }} --tags $TAGS --parameter-overrides $PARAMETER_OVERRIDES --s3-bucket $S3_BUCKET --s3-prefix ${{ inputs.STACK_NAME }} --capabilities CAPABILITY_IAM --no-fail-on-empty-changeset"
        sam deploy --config-file aws-deploy/samconfig.toml --stack-name ${{ inputs.STACK_NAME }} --tags "$TAGS" --parameter-overrides "$PARAMETER_OVERRIDES" --s3-bucket $S3_BUCKET --s3-prefix ${{ inputs.STACK_NAME }} --capabilities CAPABILITY_IAM --no-fail-on-empty-changeset
        echo "SAM template deployed successfully."
